ann <- ml_multilayer_perceptron_classifier(
cars,
carb ~ hp + disp
)
ann <- ml_multilayer_perceptron_classifier(
cars,
carb ~ hp + disp,
layers = c(2, 5, 2)
)
ann <- ml_multilayer_perceptron_classifier(
cars,
carb ~ hp + disp,
layers = c(2, 5, 6)
)
ann <- ml_multilayer_perceptron_classifier(
cars,
carb ~ hp + disp,
layers = c(2, 5, 7)
)
ann <- ml_multilayer_perceptron_classifier(
cars,
carb ~ hp + disp,
layers = c(2, 5, 8)
)
ann <- ml_multilayer_perceptron_classifier(
cars,
carb ~ hp + disp,
layers = c(6, 5, 2)
)
ann <- ml_multilayer_perceptron_classifier(
cars,
carb ~ hp + disp,
layers = c(2, 5, 6)
)
View(mtcars)
ann <- ml_multilayer_perceptron_classifier(
cars,
carb ~ hp + disp,
layers = c(2, 5, 6),
handleInvalid = "keep"
)
ann <- ml_multilayer_perceptron_classifier(
cars,
carb ~ hp + disp,
layers = c(2, 5, 6),
handleInvalid = keep
)
rlang::last_error()
mtcars = mutate(mtcars, carb = factor(carb))
View(mtcars)
ann <- ml_multilayer_perceptron_classifier(
cars,
cyl ~ hp + disp,
layers = c(2, 5, 3)
)
cars = mutate(cars, carb = case_when(carb == 6 ~ 5),
case_when(carb == 8 ~ 6))
ann <- ml_multilayer_perceptron_classifier(
cars,
carb ~ hp + disp,
layers = c(2, 5, 3)
)
ann <- ml_multilayer_perceptron_classifier(
cars,
carb ~ hp + disp,
layers = c(2, 5, 6)
)
view(cars)
mtcars = mutate(mtcars, carb = case_when(carb == 6 ~ 5,
carb == 8 ~ 6,
TRUE ~ carb))
mtcars = mutate(mtcars,
carb = case_when(carb == 6 ~ 5,
carb == 8 ~ 6,
TRUE ~ carb))
sapply(mtcars, class)
rm(mtcars)
data(mtcars)
force(mtcars)
sapply(mtcars, class)
mtcars = mutate(mtcars,
carb = case_when(carb == 6 ~ 5,
carb == 8 ~ 6,
TRUE ~ carb))
cars = mutate(cars,
carb = case_when(carb == 6 ~ 5,
carb == 8 ~ 6,
TRUE ~ carb))
view(cars)
cars <- copy_to(sc, mtcars)
library(sparklyr)
# spark_install()
library(tidyverse)
#df = read.csv('G:/My Drive/Teaching/Big data analytics/Projects/Breast cancer gene expression/METABRIC_RNA_Mutation.csv')
mtcars = mutate(mtcars,
carb = case_when(carb == 6 ~ 5,
carb == 8 ~ 6,
TRUE ~ carb))
sc <- spark_connect(master = "local")
cars <- copy_to(sc, mtcars)
cars <- copy_to(sc, mtcars, overwrite = TRUE)
view(cars)
ann <- ml_multilayer_perceptron_classifier(
cars,
carb ~ hp + disp,
layers = c(2, 5, 6)
)
ann <- ml_multilayer_perceptron_classifier(
cars,
carb ~ hp + disp,
layers = c(2, 5, 5)
)
ann <- ml_multilayer_perceptron_classifier(
cars,
carb ~ hp + disp,
layers = c(2, 5, 7)
)
predictions <- ml_predict(ann, cars)
View(predictions)
view(predictions)
mtcars = mutate(mtcars,
carb = case_when(
carb == 1 ~ 0,
carb == 2 ~ 1,
carb == 3 ~ 2,
carb == 4 ~ 3,
carb == 5 ~ 4,
carb == 6 ~ 5,
carb == 8 ~ 6,
TRUE ~ carb))
cars <- copy_to(sc, mtcars, overwrite = TRUE)
ann <- ml_multilayer_perceptron_classifier(
cars,
carb ~ hp + disp,
layers = c(2, 5, 7)
)
ann <- ml_multilayer_perceptron_classifier(
cars,
carb ~ hp + disp,
layers = c(2, 5, 6)
)
predictions <- ml_predict(ann, cars)
view(predictions)
View(cars)
View(mtcars)
ann <- ml_multilayer_perceptron_classifier(
cars,
carb ~ hp + disp,
layers = c(2, 5, 4)
)
ann <- ml_multilayer_perceptron_classifier(
cars,
carb ~ hp + disp,
layers = c(2, 5, 5)
)
ann <- ml_multilayer_perceptron_classifier(
cars,
carb ~ hp + disp,
layers = c(2, 5, 6)
)
mtcars = mutate(mtcars,
carb = case_when(
carb == 6 ~ 5,
carb == 8 ~ 6,
TRUE ~ carb))
cars <- copy_to(sc, mtcars, overwrite = TRUE)
view(cars)
data(mtcars)
force(mtcars)
View(mtcars)
mtcars = mutate(mtcars,
carb = case_when(
carb == 6 ~ 5,
carb == 8 ~ 6,
TRUE ~ carb))
View(mtcars)
cars <- copy_to(sc, mtcars, overwrite = TRUE)
view(cars)
ann <- ml_multilayer_perceptron_classifier(
cars,
carb ~ hp + disp,
layers = c(2, 5, 6)
)
ann <- ml_multilayer_perceptron_classifier(
cars,
carb ~ hp + disp,
layers = c(2, 5, 7)
)
install.packages("sparkxgb")
xgb_model <- xgboost_classifier(cars,
am ~ .,
num_class = 3,
num_round = 50,
max_depth = 4)
library(sparkxgb)
xgb_model <- xgboost_classifier(cars,
am ~ .,
num_class = 3,
num_round = 50,
max_depth = 4)
xgb_model <- xgboost_classifier(cars,
am ~ .,
num_class = 2,
num_round = 50,
max_depth = 4)
xgb_model <- xgboost_classifier(cars,
am ~ .,
num_round = 50,
max_depth = 4)
iris <- copy_to(sc, iris)
xgb_model <- xgboost_classifier(iris,
Species ~ .,
num_class = 3,
num_round = 50,
max_depth = 4)
iris <- copy_to(sc, iris)
iris <- copy_to(sc, iris, overwrite = TRUE)
iris <- copy_to(sc, iris, overwrite = TRUE)
sc <- spark_connect(master = "local")
iris <- copy_to(sc, iris, overwrite = TRUE)
library(sparklyr)
library(tidyverse)
library(sparkxgb)
sc <- spark_connect(master = "local")
spark_disconnect()
# Read cars into spark
cars <- copy_to(sc, mtcars, overwrite = TRUE)
# Web management interface
spark_web(sc)
# Plot
select(cars, hp, mpg) %>%
sample_n(100) %>%
collect() %>%
plot()
summarize_all(cars, mean)
# Linear regression
model <- ml_linear_regression(cars, mpg ~ hp)
# Logistic regression
lr <- ml_logistic_regression(
cars, am ~ hp + disp
)
validation_summary = ml_evaluate(lr, cars)
cars = mutate(cars,
carb = case_when(
carb == 6 ~ 5,
carb == 8 ~ 6,
TRUE ~ carb))
view(cars)
cars = mutate(cars,
carb = case_when(
carb == 1 ~ 0,
carb == 2 ~ 1,
carb == 3 ~ 2,
carb == 4 ~ 3,
carb == 5 ~ 4,
carb == 6 ~ 5,
carb == 8 ~ 6,
TRUE ~ carb))
# MLP
mlp <- ml_multilayer_perceptron_classifier(
cars,
am ~ hp + disp,
layers = c(2, 8, 8, 2)
)
mlp <- ml_multilayer_perceptron_classifier(
cars,
carb ~ hp + disp,
layers = c(2, 5, 7)
)
mlp <- ml_multilayer_perceptron_classifier(
cars,
carb ~ hp + disp,
layers = c(2, 5, 6)
)
xgb_model <- xgboost_classifier(
cars,
am ~ .,
num_class = 2,
num_round = 50,
max_depth = 4
)
xgb_model <- xgboost_classifier(
cars,
am ~ .,
num_class = 2
)
xgb_model <- xgboost_classifier(
cars,
am ~ .
)
iris_tbl <- sdf_copy_to(sc, iris)
xgb_model <- xgboost_classifier(
iris_tbl,
Species ~ .,
num_class = 3,
num_round = 50,
max_depth = 4
)
view(iris_tbl)
xgb_model <- xgboost_classifier(
cars,
carb ~ hp + disp,
num_class = 6,
num_round = 50,
max_depth = 4
)
xgb_model <- xgboost_classifier(
cars,
carb ~ hp + disp,
num_class = 7,
num_round = 50,
max_depth = 4
)
attrition <- copy_to(sc, rsample::attrition)
install.packages("rsample")
library(rsample)
attrition <- copy_to(sc, rsample::attrition)
data(attrition)
rsample::attrition
data("attrition", package = "modeldata")
install.packages("modeldata")
library(sparklyr)
data("attrition", package = "modeldata")
force(attrition)
library(modeldata)
attrition <- copy_to(sc, attrition)
xgb_model <- xgboost_classifier(attrition,
Attrition ~ .,
num_class = 2,
num_round = 50,
max_depth = 4)
View(attrition)
view(attrition)
library(sparklyr)
library(sparkxgb)
library(dplyr)
library(modeldata)
data("attrition", package = "modeldata")
sc <- spark_connect(master = "local")
spark_disconnect()
spark_disconnect
spark_disconnect(sc)
library(sparklyr)
library(sparkxgb)
library(dplyr)
library(modeldata)
data("attrition", package = "modeldata")
sc <- spark_connect(master = "local")
# Read cars into spark
cars <- copy_to(sc, mtcars, overwrite = TRUE)
xgb_model <- xgboost_classifier(
cars,
carb ~ hp + disp,
num_class = 6,
num_round = 50,
max_depth = 4
)
view(cars)
xgb_model <- xgboost_classifier(
cars,
carb ~ hp + disp,
num_round = 50,
max_depth = 4
)
xgb_model <- xgboost_classifier(
cars,
carb ~ hp + disp,
num_round = 50,
max_depth = 4
)
library(sparkxgb)
library(sparklyr)
library(dplyr)
sc <- spark_connect(master = "local", version = "2.3")
spark_disconnect(sc)
library(sparkxgb)
library(sparklyr)
library(dplyr)
sc <- spark_connect(master = "local", version = "2.3")
library(sparkxgb)
library(sparklyr)
library(dplyr)
sc <- spark_connect(master = "local")
library(modeldata)
data("attrition", package = "modeldata")
attrition <- copy_to(sc, attrition)
xgb_model <- xgboost_classifier(attrition,
Attrition ~ .,
num_class = 2,
num_round = 50,
max_depth = 4)
library(sparklyr)
library(sparkxgb)
library(dplyr)
library(modeldata)
data("attrition", package = "modeldata")
sc <- spark_connect(master = "local")
# Read cars into spark
cars <- copy_to(sc, mtcars, overwrite = TRUE)
spark_disconnect(sc)
library(sparklyr)
library(sparkxgb)
library(dplyr)
library(modeldata)
data("attrition", package = "modeldata")
sc <- spark_connect(master = "local")
# Read cars into spark
cars <- copy_to(sc, mtcars, overwrite = TRUE)
spark_write_csv(cars, ‘cars.csv’)
spark_write_csv(cars, 'cars.csv')
collect(cars)
spark_write_csv(collect(cars), 'cars.csv')
df = spark_read_csv('G:/My Drive/Teaching/Big data analytics/Projects/Breast cancer gene expression/METABRIC_RNA_Mutation.csv')
df = spark_read_csv(sc, 'G:/My Drive/Teaching/Big data analytics/Projects/Breast cancer gene expression/METABRIC_RNA_Mutation.csv')
view(df)
df = spark_read_csv(sc, 'cars.csv')
cars %>%
mutate(transmission = ifelse(am == 0, "automatic", "manual"))
car_group <- cars %>%
group_by(cyl) %>%
summarise(mpg = sum(mpg, na.rm = TRUE)) %>%
collect()
View(car_group)
ggplot(aes(as.factor(cyl), mpg), data = car_group) +
geom_col(fill = "#999999") + coord_flip()
ggplot(aes(as.factor(cyl), mpg), data = car_group)
ggplot(aes(as.factor(cyl), mpg), data = car_group) +
coord_flip()
# Linear regression
model <- ml_linear_regression(cars, mpg ~ hp + disp)
Sys.Date()
library(sparklyr)
library(dplyr)
# Only needs to be run once
# spark_install('3.3')
sc = spark_connect(master = "local")
cars = copy_to(sc, mtcars)
spark_disconnect(sc)
library(sparklyr)
library(dplyr)
# Only needs to be run once
# spark_install('3.3')
sc = spark_connect(master = "local")
cars = copy_to(sc, mtcars, overwrite = TRUE)
spark_write_csv(cars, 'cars.csv')
spark_write_csv(cars, 'cars.csv')
spark_read_csv(sc, 'cars.csv')
spark_read_csv(sc, 'cars.csv')
bob = spark_read_csv(sc, 'cars.csv')
cars %>%
mutate(transmission = ifelse(am == 0, "automatic", "manual"))
mutate(cars, transmission = ifelse(am == 0, "automatic", "manual"))
select(cars, hp, mpg)
summarise_all(cars, mean)
spark_write_csv(cars, 'cars.csv', overwrite = TRUE)
spark_write_csv(cars, 'cars.csv', overwrite = TRUE)
spark_read_csv(sc, 'cars.csv')
spark_write_csv(cars, 'cars.csv')
spark_read_csv(sc, 'cars.csv')
spark_read_csv(sc, 'cars.csv')
car_group = cars %>%
group_by(cyl) %>%
summarise(mpg = sum(mpg, na.rm = TRUE)) %>%
collect()
ggplot(aes(as.factor(cyl), mpg), data = car_group) + geom_col(fill = "#999999") + coord_flip()
ols_model <- ml_linear_regression(cars, mpg ~ hp + disp)
summary(ols_model)
lr_model = ml_linear_regression(cars, mpg ~ hp)
summary(lr_model)
lr_model = ml_linear_regression(cars, mpg ~ hp + disp)
summary(lr_model)
lr_model = ml_logistic_regression(cars, mpg ~ hp + disp)
lr_model = ml_logistic_regression(cars, am ~ hp + disp)
summary(lr_model)
mlp <- ml_multilayer_perceptron_classifier(
cars,
am ~ hp + disp,
layers = c(2, 8, 8, 2))
predictions = ml_predict(mlp, cars)
head(predictions)
mlp <- ml_multilayer_perceptron_classifier(
cars,
am ~ hp + disp,
layers = c(2, 8, 8, 2))
predictions = ml_predict(mlp, cars)
selection(predictions, probability, prediction, probability_0, probability_1)
mlp <- ml_multilayer_perceptron_classifier(
cars,
am ~ hp + disp,
layers = c(2, 8, 8, 2))
predictions = ml_predict(mlp, cars)
select(predictions, probability, prediction, probability_0, probability_1)
mlp <- ml_multilayer_perceptron_classifier(
cars,
am ~ hp + disp,
layers = c(2, 8, 8, 2))
predictions = ml_predict(mlp, cars)
select(predictions, prediction, probability_0, probability_1)
library(sparklyr)
library(dplyr)
library(ggplot2)
# Only needs to be run once
# spark_install('3.3')
library(sparklyr)
library(dplyr)
library(ggplot2)
# Only needs to be run once
# spark_install('3.3')
spark_web(sc)
library(styler)
install.packages("styler")
styler:::style_active_file()
